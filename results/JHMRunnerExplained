Интерпретация JMH-результатов (лог от 2025-09-15 21:47:20)
========================================================

Ниже разбор присланного лога `JmhRunner`.

1) IndexingBenchmark.buildIndex — пропускная способность индексации
------------------------------------------------------------------
Mode: Throughput (ops/s)
Params: datasetDir=dataset, useCompound=true
Result: 74 905 ops/s
CI(99.9%): [67 246, 82 565], stdev=1 989, iters=5
Warmup: 2×1s, Measure: 5×2s, Forks=1

Что это значит:
- ~75k «операций индексации» в секунду на данном (небольшом) датасете.
- Разброс по итерациям умеренный, результат стабильный.
- Ограничения: короткие окна (2s) и один fork. Для надежности стоит увеличить.

Влияние useCompound=true:
- Compound-сегменты уменьшают число мелких файлов, упрощают FS-операции.
- Но могут вести себя по-разному для индексации/поиска. Стоит сравнить с false.

2) SearchLatencyBenchmark.searchOnce — средняя латентность запроса
------------------------------------------------------------------
Mode: Average time (ms/op)
Params: datasetDir=dataset, field=contents, queriesFile=queries.txt, topK=10, useCompound=true
Result: 0.003 ms/op (≈3 мкс)
CI(99.9%): [0.002, 0.005], iters=10
Warmup: 5×200ms, Measure: 10×300ms, Forks=1

Что это значит:
- Средняя латентность ~3 микросекунды. Очень мало для реальных систем.
- Причина: маленький индекс, всё в памяти, короткие интервалы измерений.
- Вывод: это нижняя граница, а не показатель продакшн-латентности.

3) Предупреждение Lucene при JDK 23
-----------------------------------
WARNING: You are running with Java 22 or later. To make full use of MMapDirectory, please update Apache Lucene.

Смысл: версия Lucene не использует все возможности JDK 22+ для MMapDirectory.
Решение: обновить Lucene (ветка 9.x), чтобы убрать предупреждение и улучшить совместимость.

4) TL;DR по результатам
------------------------
- Индексация: ~75k ops/s — нормально для лабораторного датасета.
- Поиск: ~3 µs/op — слишком мало для реальности, но годится как демонстрация.
- Методика: мало итераций, один fork. Для валидности увеличить интервалы и форки.
- Техдолг: обновить Lucene для JDK 23.

5) Что улучшить в методике
--------------------------
1. Увеличить длительность: warmup ≥5×5–10s, measurement ≥10×5–10s, forks=2–3.
2. Сравнить useCompound: прогнать с true/false и зафиксировать разницу.
3. Увеличить датасет: хотя бы десятки тысяч документов.
4. Проверить «холодный» сценарий (сброс page cache, рандомизация).
5. Добавить профилирование: -prof gc, async-профайлер для горячих мест.
6. Контролировать JVM и окружение: -Xms/-Xmx фиксированные, отключить фоновые нагрузки.

6) Что проверить в коде
-----------------------
- Поле contents индексируется с позициями и оффсетами (уже так).
- queries.txt действительно используется, запросы чередуются.
- Попробовать разные значения topK (1 и 100) и сравнить влияние на латентность.
