21:47:20: Executing ':org.example.bench.JmhRunner.main()'...

> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :org.example.bench.JmhRunner.main()
# JMH version: 1.37
# VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37-2369
# VM invoker: /Users/andrei/Library/Java/JavaVirtualMachines/openjdk-23/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.bench.IndexingBenchmark.buildIndex
# Parameters: (datasetDir = dataset, useCompound = true)

# Run progress: 0,00% complete, ETA 00:00:16
# Fork: 1 of 1
# Warmup Iteration   1: 60,964 ops/s
# Warmup Iteration   2: сент. 15, 2025 9:47:20 PM org.apache.lucene.store.MMapDirectory lookupProvider
WARNING: You are running with Java 22 or later. To make full use of MMapDirectory, please update Apache Lucene.
73,553 ops/s
Iteration   1: 76,397 ops/s
Iteration   2: 77,067 ops/s
Iteration   3: 75,392 ops/s
Iteration   4: 73,084 ops/s
Iteration   5: 72,586 ops/s


Result "org.example.bench.IndexingBenchmark.buildIndex":
  74,905 ±(99.9%) 7,659 ops/s [Average]
  (min, avg, max) = (72,586, 74,905, 77,067), stdev = 1,989
  CI (99.9%): [67,246, 82,565] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37-2369
# VM invoker: /Users/andrei/Library/Java/JavaVirtualMachines/openjdk-23/Contents/Home/bin/java
# VM options: -Dfile.encoding=UTF-8 -Duser.country=RU -Duser.language=ru -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 200 ms each
# Measurement: 10 iterations, 300 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.bench.SearchLatencyBenchmark.searchOnce
# Parameters: (datasetDir = dataset, field = contents, queriesFile = queries.txt, topK = 10, useCompound = true)

# Run progress: 75,00% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: сент. 15, 2025 9:47:33 PM org.apache.lucene.store.MMapDirectory lookupProvider
WARNING: You are running with Java 22 or later. To make full use of MMapDirectory, please update Apache Lucene.
0,024 ms/op
# Warmup Iteration   2: 0,010 ms/op
# Warmup Iteration   3: 0,008 ms/op
# Warmup Iteration   4: 0,006 ms/op
# Warmup Iteration   5: 0,006 ms/op
Iteration   1: 0,005 ms/op
Iteration   2: 0,004 ms/op
Iteration   3: 0,004 ms/op
Iteration   4: 0,003 ms/op
Iteration   5: 0,003 ms/op
Iteration   6: 0,003 ms/op
Iteration   7: 0,003 ms/op
Iteration   8: 0,003 ms/op
Iteration   9: 0,003 ms/op
Iteration  10: 0,003 ms/op


Result "org.example.bench.SearchLatencyBenchmark.searchOnce":
  0,003 ±(99.9%) 0,001 ms/op [Average]
  (min, avg, max) = (0,003, 0,003, 0,005), stdev = 0,001
  CI (99.9%): [0,002, 0,005] (assumes normal distribution)


# Run complete. Total time: 00:00:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (datasetDir)   (field)  (queriesFile)  (topK)  (useCompound)   Mode  Cnt   Score   Error  Units
IndexingBenchmark.buildIndex            dataset       N/A            N/A     N/A           true  thrpt    5  74,905 ± 7,659  ops/s
SearchLatencyBenchmark.searchOnce       dataset  contents    queries.txt      10           true   avgt   10   0,003 ± 0,001  ms/op

BUILD SUCCESSFUL in 16s
2 actionable tasks: 1 executed, 1 up-to-date
21:47:37: Execution finished ':org.example.bench.JmhRunner.main()'.
